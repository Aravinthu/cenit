"!https://badges.gitter.im/Join%20Chat.svg!":https://gitter.im/openjaf/cenit?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge "!https://codeclimate.com/github/openjaf/cenit/badges/gpa.svg!":https://codeclimate.com/github/openjaf/cenit

h1. Cenit Hub

h2. What is?

Cenit is an open source social platform as a service for data and business integration. It makes possible 
the automation of all operational processes, connecting legacy apps and internet services.

h2. Why were doing this?

A common story for companies is the blending of solutions around its core business value. Features developed by them, third-party's adaptations and other SaaS to facilitate operations. 

Once grown enough a new expansion requires a huge integration effort. But available integration 
solutions are heavy process. Some of them also need B2B transactions using complex EDI standards 
required for large companies or business sectors.

This facts overkill many companies that canâ€™t overcome these challenges.

h2. General Feature

* 100% Open Source platform as a service (Open-PaaS).
* Hub with a great design that provides powerful yet simple abstractions, making a complex problem tractable.
* Primary concepts are: Data Type/File, Flow, Event, API Connection and Transform.
* Dynamic load schemas: XSD, JSON and EDI grammars.
* Powerful transform to translates and modified any formats to any format.
* Full Stack HTTP API and incremental API's helper libraries in several languages.
* Export and import integration settings (collections), and automatically saves its as a repo on github.
* Social networking features to share collections.

h2. Shared Collections

There are now over 25 pre-built shared integration collections out the box for connecting 
to internet services, fulfilment solutions, accounting, communications, ERP, multi-channels, etc.

h1. Join us

* Github project: https://github.com/openjaf/cenit
* Email: support@cenitsaas.com
* Website: http://www.cenitsaas.com



h2. Frameworks and Tools.

* Ruby on Rails
* MongoDB
* Mongoid and Mongoff as Object Document Mapper (ODM)
* rails_admin, for build admin panel.
* RabbitMQ for internal pipeline messages.
* Authentication (via Devise)

h2. What Is Implemented -- and What Is Not

This is a demonstration application that allows you integrate commerce solutions inspire in Wombat. You can configure the endpoint and see all the data through the data viewer.

h2. How to Use

h3. Create Cenit Hub application.

Clone the github openjaf/cenit repo and move to cenit folder.

<pre>
$ git clone https://github.com/openjaf/cenit
$ cd cenit
</pre>

Change branch to develop.

<pre>
$ git checkout -b develop origin/develop
</pre>

Ensure stay in develop branch.

<pre>
$ git branch
> *develop
</pre>

Ensure that 'develop' branch is updated.

<pre>
$ git pull origin develop
> Already up-to-date.
</pre>

Run the bundle install command to install the required gems on your computer:

<pre>
$ bundle install
</pre>

With mongodb you don't need run migrations

Run db/seed

<pre>
$ rake db:seed	
</pre>	

Run cenit hub by port: 3000

<pre>
$ rails s -p 3000
</pre>

If you have some trouble with secret_key_base running 'rails s', you can generate a random secret key value:

<pre>
$ rake secret
</pre>	

Then take this value and put it in config/initializers/secret_token.rb:

<pre>
Cenit::Application.config.secret_key_base = 'bla' # replace this
</pre>

Now visit /data, for enter in data you need sign in before. If you don't have user yet, clic in sign up. 

If you want unavailable 'sing up' change user model.

<pre>
go to http://localhost:3000
</pre>

If you have some trouble for enter in /data check that mondodb is running.

Check that you have a working installation of "RabbitMQ":http://www.rabbitmq.com, see below the guide for install RabbitMQ.

If RabbitMQ is well installed when you run rails server then you can see:

<pre>
 [*] Waiting for messages. To exit press CTRL+C	
</pre>

h2. Dependencies

Before generating your application, you will need:

* The Ruby language (version 1.9.3 or 2.0.0)
* The Rails gem (version 4.0.5)
* A working installation of "MongoDB":http://www.mongodb.org/
* A working installation of "RabbitMQ":http://www.rabbitmq.com


h3. Installing MongoDB

If you don't have MongoDB installed on your computer, you'll need to install it and set it up to be always running on your computer (run at launch).

On Mac OS X, the easiest way to install MongoDB is to install "Homebrew":http://mxcl.github.com/homebrew/ and then run the following:

<pre>
brew install mongodb
</pre>

Homebrew will provide post-installation instructions to get MongoDB running. The last line of the installation output shows you the MongoDB install location (for example, */usr/local/Cellar/mongodb/1.8.0-x86_64*). You'll find the MongoDB configuration file there. After an installation using Homebrew, the default data directory will be */usr/local/var/mongodb*.

On the Debian GNU/Linux operating system, as of March 2013, the latest stable version is MongoDB 2.0.0. With MongoDB 2.0.0, the Mongoid gem must be version 3.0.x. See the "Mongoid installation instructions":http://mongoid.org/en/mongoid/docs/installation.html#installation. Change your Gemfile to use an earlier Mongoid version:

<pre>
gem 'mongoid', github: 'mongoid/mongoid'
gem 'bson_ext', '~> 1.8.6'
</pre>

h3. Installing RabbitMQ

The "RabbitMQ":http://www.rabbitmq.com site has a good "installation guide":http://www.rabbitmq.com/download.html that addresses many operating systems. On Mac OS X, the fastest way to install RabbitMQ is with "Homebrew":http://brew.sh:

<pre>
brew install rabbitmq
</pre>

then run it:

<pre>
rabbitmq-server
</pre>

On Debian and Ubuntu, you can either "download the RabbitMQ .deb package":http://www.rabbitmq.com/download.html and install it with "dpkg":http://www.debian.org/doc/manuals/debian-faq/ch-pkgtools.en.html or make use of the "apt repository":http://www.rabbitmq.com/install-debian.html that the RabbitMQ team provides.

For RPM-based distributions like RedHat or CentOS, the RabbitMQ team provides an "RPM package":http://www.rabbitmq.com/download.html.

<pre>
Note: The RabbitMQ packages that ship with Ubuntu versions earlier than 11.10 are outdated and will not work with Bunny 0.9.0 and later versions (you will need at least RabbitMQ v2.0 for use with this guide).
</pre>

h2. Getting the Application

You have several options for getting the code.

h3. Fork

If you'd like to add features (or bug fixes) to improve the example application, you can fork the GitHub repo and "make pull requests":http://help.github.com/send-pull-requests/. Your code contributions are welcome!

h3. Clone

If you want to copy and customize the app with changes that are only useful for your own project, you can clone the GitHub repo. You'll need to search-and-replace the project name throughout the application. You probably should generate the app instead (see below). To clone:

<pre>
$ git clone https://github.com/openjaf/cenit
</pre>


h4. Web Servers

Use the default WEBrick server for convenience. If you plan to deploy to Heroku, select "thin" as your production webserver.


h4. Other Choices

Set a robots.txt file to ban spiders if you want to keep your new site out of Google search results.

It is a good idea to use "rvm":https://rvm.io/, the Ruby Version Manager, and create a project-specific rvm gemset (not available on Windows). See "Installing Rails":http://railsapps.github.io/installing-rails.html.

If you choose to create a GitHub repository, the generator will prompt you for a GitHub username and password.

h4. Troubleshooting

Other problems? Check the "issues" https://github.com/openjaf/cenit.

h3. Edit the README

If you're storing the app in a GitHub repository, please edit the README files to add a description of the app and your contact info. If you don't change the README, people will think we are the author of your version of the application.

h2. Getting Started

h3. Install the Required Gems

Check the Gemfile to see which gems are used by this application.

<pre>
$ bundle install
</pre>

You can check which gems are installed on your computer with:

<pre>
$ gem list
</pre>

Keep in mind that you have installed these gems locally. When you deploy the app to another server, the same gems (and versions) must be available.

I recommend using "rvm":https://rvm.io/, the Ruby Version Manager, to create a project-specific gemset for the application. See the article "Installing Rails":http://railsapps.github.io/installing-rails.html.

h3. Configure Mongoid

Mongoid provides access to the MongoDB database from Rails.

You can use the default configuration found in the file *config/mongoid.yml*.

If you want to see what's in your MongoDB databases, I recommend using the "MongoHub":http://mongohub.todayclose.com/ app (for Mac OS X).S

h3. Configuration File

The application uses the "figaro gem":https://github.com/laserlemon/figaro to set environment variables. Credentials for your administrator account and email account are set in the *config/application.yml* file. The *.gitignore* file prevents the *config/application.yml* file from being saved in the git repository so your credentials are kept private. See the article "Rails Environment Variables":http://railsapps.github.io/rails-environment-variables.html for more information.

Modify the file *config/application.yml*:

<pre>
# Add account credentials and API keys here.
# See http://railsapps.github.io/rails-environment-variables.html
# This file should be listed in .gitignore to keep your settings secret!
# Each entry sets a local environment variable and overrides ENV variables in the Unix shell.
# Add application configuration variables here, as shown below.
</pre>

If you wish, set your name, email address, and password for the first user's account. If you prefer, you can use the default to sign in to the application and edit the account after deployment. It is always a good idea to change the password after the application is deployed.

All configuration values in the *config/application.yml* file are available anywhere in the application as environment variables. For example, @ENV["GMAIL_USERNAME"]@ will return the string "Your_Username".

If you prefer, you can delete the *config/application.yml* file and set each value as an environment variable in the Unix shell.

h3. Set Up a Database Seed File

The *db/seeds.rb* file initializes the database with default values. To keep some data private, and consolidate configuration settings in a single location, we use the *config/application.yml* file to set environment variables and then use the environment variables in the *db/seeds.rb* file.


Note that it's not necessary to personalize the *db/seeds.rb* file before you deploy your app. You can deploy the app with an example user and then use the application's "Edit Account" feature to change name, email address, and password after you log in. Use this feature to log in as the first user and change the user name and password to your own.

You may wish to include additional sample users:

h3. Set the Database

Prepare the database and add the default user to the database by running the commands:

<pre>
$ rake db:seed
</pre>

Use @rake db:reseed@ if you want to empty and reseed the database. Or you can use @rake db:drop@ and @rake db:setup@. The equivalent task for Rails with ActiveRecord is @rake db:reset@ which will be available in Mongoid 4.0.

Set the database for running tests:

<pre>
$ rake db:test:prepare
</pre>

If youâ€™re not using "rvm":https://rvm.io/, the Ruby Version Manager, you should preface each rake command with @bundle exec@. You donâ€™t need to use @bundle exec@ if you are using rvm version 1.11.0 or newer.

h3. Change your Application's Secret Token

If you've used the Rails Composer tool to generate the application, the application's secret token will be unique, just as with any Rails application generated with the @rails new@ command.

However, if you've cloned the application directly from GitHub, it is crucial that you change the application's secret token before deploying your application in production mode. Otherwise, people could change their session information, and potentially access your site without your permission. Your secret token should be at least 30 characters long and completely random.

Get a unique secret token:


h2. Test the App

You can check that your app runs properly by entering the command

@$ rails server@

To see your application in action, open a browser window and navigate to "http://localhost:3000/":http://localhost:3000. You should see the default user listed on the home page. When you click on the user's name, you should be required to log in before seeing the user's detail page.

You should delete or change the pre-configured logins before you deploy your application.

If you test the app by starting the web server and then leave the server running while you install new gems, youâ€™ll have to restart the server to see any changes. The same is true for changes to configuration files in the config folder. This can be confusing to new Rails developers because you can change files in the app folders without restarting the server. Stop the server each time after testing and you will avoid this issue.

h2. Deploy to Heroku

For your convenience, here are "instructions for deploying your app to Heroku":http://railsapps.github.io/rails-heroku-tutorial.html. Heroku provides low cost, easily configured Rails application hosting.

h2. Customizing

"Devise":http://github.com/plataformatec/devise provides a variety of features for implementing authentication. See the Devise documentation for options.

This example application and tutorial demonstrates Devise and Mongoid working together on Rails 4. Add any models, controllers, and views that you need.

h2. Testing

The example application contains a suite of RSpec unit tests and Cucumber scenarios and step definitions.

After installing the application, run @rake -T@ to check that rake tasks for RSpec and Cucumber are available.

Run @rake spec@ to run RSpec tests.

Run @rake cucumber@ (or more simply, @cucumber@) to run Cucumber scenarios.

Please send the author a message, create an issue, or submit a pull request if you can contribute improved RSpec or Cucumber files.

h2. Troubleshooting

Problems? Check the "issues":https://github.com/RailsApps/rails3-mongoid-devise/issues.

h2. Documentation and Support

For a Mongoid introduction, Ryan Bates offers a "Railscast on Mongoid":http://railscasts.com/episodes/238-mongoid. You can find documentation for "Mongoid":http://mongoid.org/ at "http://mongoid.org/":http://mongoid.org/ There is an active "Mongoid mailing list":http://groups.google.com/group/mongoid and you can submit "Mongoid issues":http://github.com/durran/mongoid/issues at GitHub.

For a Devise introduction, Ryan Bates offers a "Railscast on Devise":http://railscasts.com/episodes/209-introducing-devise. You can find documentation for "Devise":http://github.com/plataformatec/devise at "http://github.com/plataformatec/devise":http://github.com/plataformatec/devise. There is an active "Devise mailing list":http://groups.google.com/group/plataformatec-devise and you can submit "Devise issues":http://github.com/plataformatec/devise/issues at GitHub.

h4. Issues

Please create an "issue on GitHub":https://github.com/openjaf/cenit/issues if you identify any problems or have suggestions for improvements.

h4. Where to Get Help

Your best source for help with problems is "Stack Overflow":http://stackoverflow.com/questions/tagged/ruby-on-rails-3. Your issue may have been encountered and addressed by others.

You can also try "Rails Hotline":http://www.railshotline.com/, a free telephone hotline for Rails help staffed by volunteers.

h2. Contributing

If you make improvements to this application, please share with others.

Send the author a message, create an "issue":https://github.com/openjaf/cenit/issues, or fork the project and submit a pull request.

If you add functionality to this application, create an alternative implementation, or build an application that is similar, please contact me and I'll add a note to the README so that others can find your work.

h2. Credits

Many of the concepts here develop was inspired by Wombat.

h4. Contributors

Thank you for improvements to the application:

* "Maikel Arcia":https://github.com/macarci
* "Miguel Sancho":https://github.com/sanchojaf
* "Asnioby Hdez":https://github.com/asnioby
* "Cesar Lage":https://github.com/kaerdsar
* "Daniel H. Bahr":https://github.com/dhbahr
* "Maykell Sanchez":https://github.com/kellsaro
* "JosÃ© A. Cruz":https://github.com/jalbertcruz
* "Maria E. Guirola":https://github.com/maryguirola

h2. MIT License

"MIT License":http://www.opensource.org/licenses/mit-license


h2. Useful Links

